package repositories;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;

import org.hibernate.Session;
import org.hibernate.Transaction;

import tables.Question;
import util.HibernateUtil;

public class QuestionDAO {
	
	public void saveQuestion(Question question) {

        Transaction transaction = null;

        try (Session session = HibernateUtil.getSessionFactory().openSession()) {

            // start a transaction

            transaction = session.beginTransaction();

            // save the object
            
            session.save(question);

            // commit transaction

            transaction.commit();
            System.out.println("Dodawanie udane");

        } catch (Exception e) {

            if (transaction != null) {

                transaction.rollback();

            }

            e.printStackTrace();

        }

    }

	public List<Question> getTenRandomQuestions () {
		Session session = null;
		List<Question> questions = new ArrayList<>();;
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			CriteriaBuilder qb = session.getCriteriaBuilder();
		    CriteriaQuery<Long> cq = qb.createQuery(Long.class);
		    cq.select(qb.count(cq.from(Question.class)));
		    //long max = session.createQuery(cq).getSingleResult();
		    
			//Random rng = new Random();
			
			//Set<Integer> generated = new LinkedHashSet<Integer>();
			questions = session.createQuery("FROM Question ORDER BY constVal", Question.class).setMaxResults(10).list();
			System.out.println(questions.size());
			/*while (questions.size() < 10)
			{
			    Integer next = rng.nextInt((int)max) + 1;

				questions.add(session.createQuery("FROM Question WHERE question_id = " + next, Question.class).getSingleResult());
			    generated.add(next);
			}*/
		    
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			if (session != null && session.isOpen()) {
                session.close();
            }
		}

		return questions;
	}
	
	public List < Question > getQuestions() {

        try (Session session = HibernateUtil.getSessionFactory().openSession()) {

            return session.createQuery("from Questions", Question.class).list();

        }

    }
	
	
}
