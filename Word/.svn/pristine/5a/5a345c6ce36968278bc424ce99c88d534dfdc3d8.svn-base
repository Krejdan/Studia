package application;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import daos.QuestionDao;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import javafx.util.Duration;
import tables.Question;

public class TheoreticalExamController implements Initializable {

	@FXML
	private Label questionText;
	@FXML
	private Label questionNumber;
	@FXML
	private ImageView questionImage;
	@FXML
	private RadioButton answerButton1;
	@FXML
	private ToggleGroup answerButtonsGroup;
	@FXML
	private RadioButton answerButton2;
	@FXML
	private RadioButton answerButton3;
	@FXML
	private RadioButton answerButton4;
	@FXML
	private Button answerQuestionButton;
	@FXML
	private Label timeLeftTimer;
	@FXML
	private Button finishExamButton;
    @FXML
    private Label questionTimerLabel;

	private final static int examTime = 100;
	private final static int questionTime = 10;
	private Timeline examTimer;
	private Timeline questionTimer;
	private int examSecondsLeft;
	private int questionSecondsLeft;
	private int currentQuestion;
	private int numberOfQuestions;
	private List<Question> questions = new ArrayList<>();

	@FXML
	void answerQuestionClicked(ActionEvent event) {

	/*	if (answerButtonsGroup.getSelectedToggle() == null)
			AlertBox.display("B³¹d", "Nale¿y zaznaczyæ odpowiedŸ");*/
		if (currentQuestion == numberOfQuestions)
			endExam();
		else {
			questionTimer.stop();
			changeQuestion();
		}
	}

	@FXML
	void finishClicked(ActionEvent event) {
		endExam();
	}

	private void endExam() {
		AlertBox.display("", "Koniec egzaminu!");
		examTimer.stop();
		questionTimer.stop();
		Parent examResultView;
		try {
			examResultView = FXMLLoader.load(getClass().getResource("LoginScreen.fxml"));
			Scene examResultScene = new Scene(examResultView);
			Stage window = (Stage) questionText.getScene().getWindow();

			window.setScene(examResultScene);
			window.show();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void changeQuestion() {
		answerButtonsGroup.selectToggle(null);
		questionNumber.setText(String.format("%d/%d", currentQuestion + 1, numberOfQuestions));
		questionText.setText(questions.get(currentQuestion).getQuestion());
		answerButton1.setText(questions.get(currentQuestion).getAnswer1());
		answerButton2.setText(questions.get(currentQuestion).getAnswer2());
		answerButton3.setText(questions.get(currentQuestion).getAnswer3());
		answerButton4.setText(questions.get(currentQuestion).getCorrectAnswer());	
		byte[] data = questions.get(currentQuestion).getImage();
		InputStream targetStream = new ByteArrayInputStream(data);
		questionImage.setImage(new Image(targetStream));
		
		currentQuestion++;
		startNewQuestionTimer();
	}

	private void checkAnswerIfCorrect() {

	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		examSecondsLeft = examTime;
		currentQuestion = 0;
		numberOfQuestions = 10;

		// Database connection
		QuestionDao questionDao = new QuestionDao();
		questions = questionDao.getRandomQuestions(10);

		// Initialize controller
		changeQuestion();
		//questionText.setText(questions.get(0).getQuestion());
		//questionNumber.setText(String.format("%d/%d", currentQuestion + 1, numberOfQuestions));
		// questionImage.setImage(FXUtil.getJavaFXImage(questions.get(0).getImage(),
		// 687, 366));

		/*
		 * byte[] data; try { data =
		 * Files.readAllBytes(Paths.get(this.getClass().getResource("/questions/ex.jpg")
		 * .toURI())); InputStream targetStream = new ByteArrayInputStream(data);
		 * questionImage.setImage(new Image(targetStream)); } catch (IOException e1) {
		 * // TODO Auto-generated catch block e1.printStackTrace(); } catch
		 * (URISyntaxException e1) { // TODO Auto-generated catch block
		 * e1.printStackTrace(); }
		 */
		/*byte[] data = questions.get(0).getImage();
		InputStream targetStream = new ByteArrayInputStream(data);
		questionImage.setImage(new Image(targetStream));*/

		// questionImage.setImage(new Image("/questions/example.png"));

		examTimer = new Timeline(new KeyFrame(Duration.seconds(0), event -> {
			timeLeftTimer.setText(String.format("%d:%02d", examSecondsLeft / 60, examSecondsLeft % 60));
			examSecondsLeft--;
		}), new KeyFrame(Duration.seconds(1)));
		examTimer.setCycleCount(examTime + 1);
		examTimer.setOnFinished(e -> Platform.runLater(() -> {
			endExam();
		}));
		examTimer.play();
		
		//startNewQuestionTimer();

	}
	
	private void startNewQuestionTimer() {
		questionSecondsLeft = questionTime;
		questionTimer = new Timeline(new KeyFrame(Duration.seconds(0), event -> {
			questionTimerLabel.setText(String.format("%d:%02d", questionSecondsLeft / 60, questionSecondsLeft % 60));
			questionSecondsLeft--;
		}), new KeyFrame(Duration.seconds(1)));
		questionTimer.setCycleCount(questionTime + 1);
		questionTimer.setOnFinished(e -> Platform.runLater(() -> {
			changeQuestion();
		}));
		questionTimer.play();	
	}

}
