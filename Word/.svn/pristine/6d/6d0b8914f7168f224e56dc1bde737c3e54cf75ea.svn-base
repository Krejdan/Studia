package server;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.persistence.NoResultException;

import daos.*;
import tables.*;
import util.Connection;
import util.HibernateUtil;

public class Server {

	private static final int PORT = 25565;
	private static List<User> users = Collections.synchronizedList(new ArrayList<>());

	private static void initUsers() throws NoResultException {
		TheoreticalExamDao tedao = new TheoreticalExamDao();
		TheoreticalExam theoreticalExam = tedao.getOpen();
		users.addAll(theoreticalExam.getUsers());
	}

	public static void main(String[] args) throws Exception {
		ServerSocket listener = new ServerSocket(PORT);
		HibernateUtil.getSessionFactory();
		try {
			initUsers();
		} catch (NoResultException e) {
			System.out.println("Brak egzaminow otwartych po ponownym starcie serwera");
		}
		System.out.println("Serwer otwarty");
		try {
			while (true) {
				System.out.println("Oczekiwanie na klienta");
				new Handler(listener.accept()).start();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			listener.close();
		}
	}

	private static class Handler extends Thread {
		private Socket socket;
		private ObjectInputStream input;
		private OutputStream os;
		private ObjectOutputStream output;
		private InputStream is;

		private ExamResultDao examResultDao = new ExamResultDao();
		private ResourceDao resourceDao = new ResourceDao();
		private UserDao userDao = new UserDao();
		private TheoreticalExamDao tedao = new TheoreticalExamDao();
		private ExaminationCardDao examDao = new ExaminationCardDao();
		private TermDAO termDao = new TermDAO();
		private HourDao hourDao = new HourDao();
		private YearDao yearDao = new YearDao();
		private MonthDao monthDao = new MonthDao();
		private DayDao dayDao = new DayDao();
		private QuestionDao questionDao = new QuestionDao();
		private ExamTaskDao examTaskDao = new ExamTaskDao();
		
		public Handler(Socket socket) throws IOException {
			this.socket = socket;
		}

		public void getTheoreticalExams(Request request) throws IOException {
			Year year = yearDao.get(request.getDate().getYear());
			Day day = dayDao.get(request.getDate().getDayOfMonth());
			Month month = monthDao.get(request.getDate().getMonthValue());
			List<TheoreticalExam> resultTheoreticalExams = new ArrayList<>();
			List<Term> terms = new ArrayList<>();
			List<TheoreticalExam> theoreticalExams = new ArrayList<>();
			for (int hourID = 1; hourID <= 20; hourID++) {
				terms = termDao.get(year, month, day, hourDao.get(hourID));
				if (!terms.isEmpty()) {
					theoreticalExams = tedao.getAll();
					resultTheoreticalExams.addAll(theoreticalExams);
				}
			}
			output.writeObject(resultTheoreticalExams);
		}

		public void startTheoreticalExam(Request request) throws IOException {
			TheoreticalExam theoreticalExam = new TheoreticalExam();
			User user = request.getUser();
			Request send = new Request();
			try {
				theoreticalExam = tedao.getOpen();
				if (users.contains(user)) {
					send.setResult(true);
					send.setQuestions(questionDao.getRandomQuestions(10));
					send.setTheoreticalExam(theoreticalExam);
					users.remove(users.indexOf(request.getUser()));
				} else {
					send.setResult(false);
					send.setMessage(
							"Nie znajdujesz siê na liœcie otwartego egzaminu lub egzamin z tego konta zosta³ ju¿ uruchomiony");
				}
				if (users.isEmpty()) {
					theoreticalExam.setIsOpen((short) 0);
					tedao.update(theoreticalExam);
				}
			} catch (NoResultException e) {
				send.setResult(false);
				send.setMessage("¯aden egzamin nie jest aktualnie otwarty");
			} finally {
				output.writeObject(send);
			}
		}

		public void getExaminationCard(Request request) throws IOException {
			User user = request.getUser();
			Request send = new Request();
			ExaminationCard examCard = examDao.getFirstAvailable();
			if (examCard != null) {
				examCard.setExaminer(user);
				examDao.update(examCard);
				send.setResult(true);
				send.setExaminationCard(examCard);
			} else {
				send.setResult(false);
				send.setMessage("Brak dostepnych kart egzaminacyjnych");
			}
			output.writeObject(send);
		}

		public void endTheoreticalExam(Request request) throws IOException {
			Request send = new Request();
			int i = 0;
			int points = 0;
			List<QuestionResult> questionResults = new ArrayList<>();
			ExamResult examResult = new ExamResult(" ", request.getTheoreticalExam(),
					resourceDao.getByName("ExamResult"), userDao.get(request.getUser().getEmail()));
			examResultDao.add(examResult);
			List<String> answers = request.getAnswers();
			List<Question> questions = request.getQuestions();
			for (Question question : questions) {
				if (answers.get(i).equals(question.getCorrectAnswer())) {
					questionResults.add(new QuestionResult(question, examResult, 1, answers.get(i)));
					points++;
				} else {
					questionResults.add(new QuestionResult(question, examResult, 0, answers.get(i)));
				}
				i++;
			}
			examResult.setQuestions(questionResults);
			if (points > (questions.size() / 2))
				examResult.setWynik("POZYTYWNY");
			else
				examResult.setWynik("NEGATYWNY");
			examResultDao.update(examResult);
			send.setPoints(points);
			output.writeObject(send);
		}

		public void sendExaminationCard(Request request) {
			ExaminationCard examinationCard = request.getExaminationCard();
			examinationCard.setResult(request.getMessage());
			examinationCard.setComments(request.getMail());
			examinationCard.setExamTaskResults(request.getExamTaskResults());
			examDao.update(examinationCard);
			System.out.println(examinationCard.getExamTaskResults());
		}

		public void login(Request request) throws IOException {
			String mail = request.getMail();
			String password = request.getPassword();
			Request send = new Request();
			try {
				User user = userDao.get(mail);
				if (user.getPassword().equals(password)) {
					send.setResult(true);
					send.setUser(user);
				} else {
					send.setResult(false);
					send.setMessage("B³êdne has³o");
				}
			} catch (NoResultException e) {
				send.setResult(false);
				send.setMessage("U¿ytkownik o podanym mailu nie istnieje");
			} finally {
				output.writeObject(send);
			}
		}

		public void openTheoreticalExam(Request request) throws IOException {
			Boolean exists = false;
			List<TheoreticalExam> theoreticalExams = new ArrayList<>();
			theoreticalExams = new ArrayList<>();
			theoreticalExams = tedao.getAll();
			for (TheoreticalExam theoreticalExam : theoreticalExams) {
				if (theoreticalExam.getIsOpen() == 1) {
					Connection.request = new Request();
					Connection.request.setMessage(
							"Istnieje ju¿ otwarty egzamin (Egzamin o id: " + theoreticalExam.getExamId() + ")");
					Connection.request.setResult(false);
					output.writeObject(Connection.request);
					exists = true;
				}
				break;
			}
			if (!exists) {
				TheoreticalExam theoreticalExam = request.getTheoreticalExam();
				users.addAll(theoreticalExam.getUsers());
				System.out.println(theoreticalExam.getUsers());
				theoreticalExam.setIsOpen((short) 1);
				tedao.update(theoreticalExam);
				Connection.request = new Request();
				Connection.request.setResult(true);
				Connection.request.setMessage("Otwarcie powiod³o siê");
				output.writeObject(Connection.request);
			}
		}
		
		public void getTasks(Request request) throws IOException {
			output.writeObject(examTaskDao.get(request.getExaminationCard().getCategory()));
		}
		@Override
		public void run() {
			try {

				System.out.println("Po³¹czono z klientem");
				os = socket.getOutputStream();
				output = new ObjectOutputStream(os);
				is = socket.getInputStream();
				input = new ObjectInputStream(is);
				while (socket.isConnected()) {
					Request request = (Request) input.readObject();
					switch (request.getType()) {
					case GET_THEORETICAL_EXAMS:
						getTheoreticalExams(request);
						break;
					case START_THEORETICAL_EXAM:
						startTheoreticalExam(request);
						break;
					case GET_EXAMINATION_CARD:
						getExaminationCard(request);
						break;
					case END_THEORETICAL_EXAM:
						endTheoreticalExam(request);
						break;
					case SEND_EXAMINATION_CARD:
						sendExaminationCard(request);
						break;
					case GET_FREE_TERMS:
						break;
					case LOGIN:
						login(request);
						break;
					case OPEN_THEORETICAL_EXAM:
						openTheoreticalExam(request);
						break;
					case GET_TASKS:
						getTasks(request);
					}
				}

			} catch (EOFException e1) {
				System.out.println("Klient zakoñczy³ po³¹czenie!");
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
	}
}
