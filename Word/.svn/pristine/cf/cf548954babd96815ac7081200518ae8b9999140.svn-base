package tables;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name="Users")
public class User {
	
	@Id
	@SequenceGenerator(name="userSeq", sequenceName="users_seq", allocationSize=1, initialValue=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="userSeq")
	@Column(name="user_id")
	private int userId;
	
	@Column(name="name")
	private String name;
	
	@Column(name="second_name")
	private String secondName;
	
	@Column(name="birth_date")
	private Date birthDate;
	
	@Column(name="email")
	private String email;
	
	@Column(name="password")
	private String password;
	
	@ManyToMany(fetch=FetchType.LAZY)
	@JoinTable(
			name="UserRoles",
			joinColumns= {@JoinColumn(name="user_id") },
			inverseJoinColumns= {@JoinColumn(name="position_id")}
	)
	private List<Position> positions = new ArrayList<>();
	
	@ManyToMany(fetch=FetchType.EAGER, mappedBy="users")
	private List<TheoreticalExam> theoreticalExams = new ArrayList<>();
	
	public User() {
	}

	public User(String name, String secondName, Date birthDate, String email, String password) {
		super();
		this.name = name;
		this.secondName = secondName;
		this.birthDate = birthDate;
		this.email = email;
		this.password = password;
	}
	
	public void addPosition(Position position) {
		positions.add(position);
		position.getUsers().add(this);
	}
	
	public void removePosition(Position position) {
		positions.remove(position);
		position.getUsers().remove(this);
	}
	
	public int getUserId() {
		return userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSecondName() {
		return secondName;
	}

	public void setSecondName(String secondName) {
		this.secondName = secondName;
	}

	public Date getBirthDate() {
		return birthDate;
	}

	public void setBirthDate(Date birthDate) {
		this.birthDate = birthDate;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public List<Position> getPositions() {
		return positions;
	}

	public void setPositions(List<Position> positions) {
		this.positions = positions;
	}
	
	public List<TheoreticalExam> getTheoreticalExams() {
		return theoreticalExams;
	}

	public void setTheoreticalExam(List<TheoreticalExam> theoriticalExams) {
		this.theoreticalExams = theoriticalExams;
	}

	@Override
	public String toString() {
		return "User [userId=" + userId + ", name=" + name + ", secondName=" + secondName + ", birthDate=" + birthDate
				+ ", email=" + email + ", password=" + password + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((birthDate == null) ? 0 : birthDate.hashCode());
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((password == null) ? 0 : password.hashCode());
		result = prime * result + ((positions == null) ? 0 : positions.hashCode());
		result = prime * result + ((secondName == null) ? 0 : secondName.hashCode());
		result = prime * result + userId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (birthDate == null) {
			if (other.birthDate != null)
				return false;
		} else if (!birthDate.equals(other.birthDate))
			return false;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (password == null) {
			if (other.password != null)
				return false;
		} else if (!password.equals(other.password))
			return false;
		if (positions == null) {
			if (other.positions != null)
				return false;
		} else if (!positions.equals(other.positions))
			return false;
		if (secondName == null) {
			if (other.secondName != null)
				return false;
		} else if (!secondName.equals(other.secondName))
			return false;
		if (userId != other.userId)
			return false;
		return true;
	}
	
	
}
