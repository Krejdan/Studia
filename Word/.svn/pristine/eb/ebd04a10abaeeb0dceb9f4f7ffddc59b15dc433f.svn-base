package application;

import java.net.URL;
import java.time.LocalDate;
import java.util.List;
import java.util.ResourceBundle;

import daos.CarDao;
import daos.DayDao;
import daos.ExamCategoryDao;
import daos.ExamResultDao;
import daos.ExaminationCardDao;
import daos.HourDao;
import daos.MonthDao;
import daos.TermDAO;
import daos.YearDao;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.ListView;
import tables.Day;
import tables.ExamCategory;
import tables.ExamResult;
import tables.Month;
import tables.Term;
import tables.TheoreticalExam;
import tables.User;
import tables.Year;

public class OrderTermController implements Initializable {

	@FXML
	private ChoiceBox<ExamCategory> categoryChoiceBox;
	@FXML
	private DatePicker datePicker;
	@FXML
	private Button checkAvailableButton;
	@FXML
	private Button orderTermButton;
	@FXML
	private Button returnButton;
	@FXML
	private ListView<?> termsList;

	private User user;

	public void initUser(User user) {
		this.user = user;
	}

	@FXML
	private void chceckAvailableOnClick(ActionEvent event) {
		DayDao dayDao = new DayDao();
		YearDao yearDao = new YearDao();
		MonthDao monthDao = new MonthDao();
		HourDao hourDao = new HourDao();
		TermDAO termDao = new TermDAO();
		CarDao carDao = new CarDao();
		ExaminationCardDao examinationCardDao = new ExaminationCardDao();

		LocalDate date = datePicker.getValue();

		Term term = new Term();

		Year year = yearDao.get(date.getYear());
		Month month = monthDao.get(date.getMonthValue());
		Day day = dayDao.get(date.getDayOfMonth());

		for (int hour = 8; hour < 18; hour++) {
			term = new Term(year, month, day, hourDao.getByHourAndMinute(hour, 0));
			termDao.update(term);

			if (canOrderPractical()) {
				int numberOfCars = carDao.getAll().size();
				if(numberOfCars > examinationCardDao.numberOfCarsUsed(term))
				{
					//examinationCard
				}
			}

		}

	}

	private boolean canOrderPractical() {
		List<TheoreticalExam> theoreticalExams = user.getTheoreticalExams();

		ExamResultDao examResultDao = new ExamResultDao();

		for (TheoreticalExam exam : theoreticalExams) {
			List<ExamResult> examResults = examResultDao.get(exam);
			for (ExamResult result : examResults) {
				if (result.getEgzaminowany().equals(user) && result.getWynik().equals("POZYTYWNY"))
					return true;
			}
		}
		return false;
	}

	@FXML
	private void orderOnClick(ActionEvent event) {

	}

	@FXML
	private void returnOnClick(ActionEvent event) {

	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {

		ExamCategoryDao examCategoryDao = new ExamCategoryDao();
		List<ExamCategory> examCategories = examCategoryDao.getAll();

		categoryChoiceBox.getItems().addAll(examCategories);

	}

}
