package application;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.ResourceBundle;

import daos.QuestionDao;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import javafx.util.Duration;
import tables.Question;

public class TheoreticalExamController implements Initializable {

	@FXML
	private Label questionText;
	@FXML
	private Label questionNumber;
	@FXML
	private ImageView questionImage;
	@FXML
	private RadioButton answerButton1;
	@FXML
	private ToggleGroup answerButtonsGroup;
	@FXML
	private RadioButton answerButton2;
	@FXML
	private RadioButton answerButton3;
	@FXML
	private RadioButton answerButton4;
	@FXML
	private Button answerQuestionButton;
	@FXML
	private Label timeLeftTimer;
	@FXML
	private Button finishExamButton;
	@FXML
	private Label questionTimerLabel;

	private final static int examTime = 100;
	private final static int questionTime = 10;
	private Timeline examTimer;
	private Timeline questionTimer;
	private int examSecondsLeft;
	private int questionSecondsLeft;
	private int currentQuestion;
	private int numberOfQuestions;
	private List<Question> questions = new ArrayList<>();

	@FXML
	void answerQuestionClicked(ActionEvent event) {

		/*
		 * if (answerButtonsGroup.getSelectedToggle() == null) AlertBox.display("B³¹d",
		 * "Nale¿y zaznaczyæ odpowiedŸ");
		 */
		if (currentQuestion == numberOfQuestions)
			endExam();
		else {
			//questionTimer.stop();
			changeQuestion();
		}
	}

	@FXML
	void finishClicked(ActionEvent event) {
		endExam();
	}

	private void endExam() {
		AlertBox.display("", "Koniec egzaminu!");
		examTimer.stop();
		//questionTimer.stop();
		Parent examResultView;
		try {
			examResultView = FXMLLoader.load(getClass().getResource("LoginScreen.fxml"));
			Scene examResultScene = new Scene(examResultView);
			Stage window = (Stage) questionText.getScene().getWindow();

			window.setScene(examResultScene);
			window.show();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void changeQuestion() {
		startNewQuestionTimer();
		answerButtonsGroup.selectToggle(null);
		questionNumber.setText(String.format("%d/%d", currentQuestion + 1, numberOfQuestions));
		questionText.setText(questions.get(currentQuestion).getQuestion());

		setUpAnswerButtons();
		
		byte[] data = questions.get(currentQuestion).getImage();
		InputStream targetStream = new ByteArrayInputStream(data);
		questionImage.setImage(new Image(targetStream));

		currentQuestion++;

	}

	private void setUpAnswerButtons() {
		Question question = questions.get(currentQuestion);
		List<String> possibleAnswers = new ArrayList<String>();
		if (question.getAnswer1() != null)
			possibleAnswers.add(question.getAnswer1());
		if (question.getAnswer2() != null)
			possibleAnswers.add(question.getAnswer2());
		if (question.getAnswer3() != null)
			possibleAnswers.add(question.getAnswer3());
		possibleAnswers.add(question.getCorrectAnswer());
		Collections.shuffle(possibleAnswers);

		int numberOfAnswers = possibleAnswers.size();

		switch (numberOfAnswers) {
			case 4:
				answerButton1.setDisable(false);
				answerButton2.setDisable(false);
				answerButton3.setDisable(false);
				answerButton4.setDisable(false);
				answerButton1.setText(possibleAnswers.get(0));
				answerButton2.setText(possibleAnswers.get(1));
				answerButton3.setText(possibleAnswers.get(2));
				answerButton4.setText(possibleAnswers.get(3));
				break;
			case 3:
				answerButton1.setDisable(false);
				answerButton2.setDisable(false);
				answerButton3.setDisable(false);
				answerButton4.setDisable(true);
				answerButton1.setText(possibleAnswers.get(0));
				answerButton2.setText(possibleAnswers.get(1));
				answerButton3.setText(possibleAnswers.get(2));
				answerButton4.setText("");
				break;
			case 2:
				answerButton1.setDisable(false);
				answerButton2.setDisable(false);
				answerButton3.setDisable(true);
				answerButton4.setDisable(true);
				answerButton1.setText(possibleAnswers.get(0));
				answerButton2.setText(possibleAnswers.get(1));
				answerButton3.setText("");
				answerButton4.setText("");
				break;
			default:
				break;
		}
	}

	private void checkAnswerIfCorrect() {

	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		examSecondsLeft = examTime;
		questionSecondsLeft = questionTime;
		currentQuestion = 0;
		numberOfQuestions = 10;

		// Database connection
		QuestionDao questionDao = new QuestionDao();
		questions = questionDao.getRandomQuestions(10);

		// Initialize controller
		changeQuestion();
		
		examTimer = new Timeline(new KeyFrame(Duration.seconds(0), event -> {
			timeLeftTimer.setText(String.format("%d:%02d", examSecondsLeft / 60, examSecondsLeft % 60));
			examSecondsLeft--;
			
			questionSecondsLeft--;
			if(questionSecondsLeft < 0) changeQuestion();

			questionTimerLabel.setText(String.format("%d:%02d", questionSecondsLeft / 60, questionSecondsLeft % 60));
		}), new KeyFrame(Duration.seconds(1)));
		examTimer.setCycleCount(examTime + 1);
		examTimer.setOnFinished(e -> Platform.runLater(() -> {
			endExam();
		}));
		examTimer.play();

		// startNewQuestionTimer();

	}

	private void startNewQuestionTimer() {
		questionSecondsLeft = questionTime;
		//questionTimerLabel.setText(String.format("%d:%02d", questionSecondsLeft / 60, questionSecondsLeft % 60));
	/*	questionTimer = new Timeline(new KeyFrame(Duration.seconds(0), event -> {
			questionTimerLabel.setText(String.format("%d:%02d", questionSecondsLeft / 60, questionSecondsLeft % 60));
			questionSecondsLeft--;
		}), new KeyFrame(Duration.seconds(1)));
		questionTimer.setCycleCount(questionTime + 1);
		questionTimer.setOnFinished(e -> Platform.runLater(() -> {
			changeQuestion();
		}));
		questionTimer.play();*/
	}

}
