package application;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import daos.ExamTaskDao;
import daos.ExaminationCardDao;
import fxclassess.FirstMistakeTableCell;
import fxclassess.PassedTableCell;
import fxclassess.SecondMistakeTableCell;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import tables.ExamTask;
import tables.ExamTaskResult;
import tables.ExaminationCard;
import tables.User;

public class PracticalExamController implements Initializable {

	@FXML
	private TableView<ExamTaskResult> tasksTable;
	@FXML
	private TableColumn<ExamTaskResult, ExamTask> tasksColumn;
	@FXML
	private TableColumn<ExamTaskResult, Integer> passedColumn;
	@FXML
	private TableColumn<ExamTaskResult, Integer> mistake1Column;
	@FXML
	private TableColumn<ExamTaskResult, Integer> mistake2Column;
	@FXML
	private Button scoreButton;
	@FXML
	private Button firstMistakeButton;
	@FXML
	private Button secondMistakeButton;
	@FXML
	private Label firstNameLabel;
	@FXML
	private Label lastNameLabel;
	@FXML
	private Label dateLabel;
	@FXML
	private Label categoryLabel;
	@FXML
	private TextArea commentArea;
	@FXML
	private Button endExamButton;
    @FXML
    private ChoiceBox<String> examResultChoiceBox;
    
    List<ExamTaskResult> examTaskResultList;
    
	private User user;
	private ExaminationCard exam;

	public void initUser(User user) {
		this.user = user;
	}

	public void initExam(ExaminationCard exam) {
		this.exam = exam;
	}

	@FXML
	void endExamOnClick(ActionEvent event) {
		
		//exam.setExamTasks(examTaskResultList);
		for(ExamTaskResult result : examTaskResultList) {
			exam.addTask(result.getExamTask(), result.getResult());
		}
		exam.setResult(examResultChoiceBox.getSelectionModel().getSelectedItem());
		exam.setComments(commentArea.getText());
		
		ExaminationCardDao examCardDao = new ExaminationCardDao();
		examCardDao.update(exam);
		
		
		FXMLLoader loader = new FXMLLoader();
		loader.setLocation(getClass().getResource("ExaminerMainView.fxml"));
		Parent examinerView;
		try {
			examinerView = loader.load();
			Scene examinerMainScene = new Scene(examinerView);

			ExaminerViewController examinerViewController = loader.getController();
			examinerViewController.initUser(this.user);

			Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
			window.setScene(examinerMainScene);
			window.show();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@FXML
	void firstMistakeOnClick(ActionEvent event) {
		ExamTaskResult taskResult = tasksTable.getSelectionModel().getSelectedItem();
		if (taskResult != null)
			taskResult.setResult(taskResult.getResult() ^ 2);
		refreshTable();
	}

	@FXML
	void scoreOnClick(ActionEvent event) {
		ExamTaskResult taskResult = tasksTable.getSelectionModel().getSelectedItem();
		if (taskResult != null)
			taskResult.setResult(taskResult.getResult() ^ 1);
		refreshTable();

	}

	@FXML
	void secondMistakeOnClick(ActionEvent event) {
		ExamTaskResult taskResult = tasksTable.getSelectionModel().getSelectedItem();
		if (taskResult != null)
			taskResult.setResult(taskResult.getResult() ^ 4);
		refreshTable();
	}

	private void refreshTable() {
		if (tasksTable.getColumns().get(0) != null) {
			tasksTable.getColumns().get(0).setVisible(false);
			tasksTable.getColumns().get(0).setVisible(true);
		}
	}
	
    @FXML
    void examResultChoiceBoxClicked(MouseEvent event) {

    }

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {

		Platform.runLater(() -> {
			ExamTaskDao examTaskDao = new ExamTaskDao();

			// List<ExamTask> examTaskList = examTaskDao.getAll();
			// examTaskDao.get(examCard.getCategory());

			List<ExamTask> examTaskList = examTaskDao.get(exam.getCategory());

			// exam.setExamTasks(examTaskList.get(1).getExaminationCards());

			examTaskResultList = new ArrayList<ExamTaskResult>();
			for (ExamTask task : examTaskList) {
				examTaskResultList.add(new ExamTaskResult(0, task, exam));
			}

			ObservableList<ExamTaskResult> taskResults = FXCollections.observableArrayList(examTaskResultList);

			tasksColumn.setCellValueFactory(new PropertyValueFactory<ExamTaskResult, ExamTask>("examTask"));
			passedColumn.setCellValueFactory(new PropertyValueFactory<ExamTaskResult, Integer>("result"));
			mistake1Column.setCellValueFactory(new PropertyValueFactory<ExamTaskResult, Integer>("result"));
			mistake2Column.setCellValueFactory(new PropertyValueFactory<ExamTaskResult, Integer>("result"));

			passedColumn.setCellFactory(cell -> new PassedTableCell());
			mistake1Column.setCellFactory(cell -> new FirstMistakeTableCell());
			mistake2Column.setCellFactory(cell -> new SecondMistakeTableCell());

			tasksTable.setItems(taskResults);

			firstNameLabel.setText(exam.getExamined().getName());
			lastNameLabel.setText(exam.getExamined().getSecondName());
			dateLabel.setText(exam.getTerm().toString());
			categoryLabel.setText(exam.getCategory().toString());
			


		});

		List<String> examResultChoices = new ArrayList<String>();
		examResultChoices.add("NEGATYWNY");
		examResultChoices.add("POZYTYWNY");
		examResultChoiceBox.setItems(FXCollections.observableArrayList(examResultChoices));
		endExamButton.disableProperty().bind(examResultChoiceBox.valueProperty().isNull());
	}

}
